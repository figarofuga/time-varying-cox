---
title: "How to analysis in R"
author: "Nozomi Niimi"
execute:
  echo: false
format:
  revealjs
---

<!-- https://necostat.hatenablog.jp/entry/2022/07/12/102442 -->

## Introduction {.smaller}

-   生存分析において治療効果を定量化するときに最もよく使われるCox回帰分析
-   Cox回帰はその性質上、いくつかの過程が必要である
    -   比例ハザード性
    -   **治療効果はどの時点でも同じ**
    -   治療効果(関連)の線形性

## Cox proportional hazardの比例ハザード

## ![Basic idea of Cox proportional hazard model](images/basic-cox-idea.jpeg)

-   どの場所でもHazardの比率が同じ = 比例ハザード性

```{r}
#| label: setup
#| echo: false

library(kableExtra)
library(tidyverse)
library(pammtools)
library(rstpm2)
library(survPen)
library(survival)
library(rms)
library(ggsurvfit)
library(survminer)
library(riskRegression)

```

## でも現実は

-   時間によって、関与する因子の情報が変わったりする
    -   時期によってタバコの本数が変わったり禁煙をしたり
-   因子が同じでも、時期によって関与の程度が変わる
    -   放射線曝露は若年者と高齢者で与える影響はおそらく変わる
-   どうする？

## Time-varying covariates

-   時間によって変化する因子、2種類存在する

    -   時間と共に値が変化する共変量

    -   時間とともに係数が変化する

## 1. 時間と共に値が変化する共変量

```{r}
#| label: testdata-prep

data(heart, package = "survival")

dat <- jasa |> 
  dplyr::mutate(
    futime = pmax(.5, fu.date - accept.dt), 
    txtime = as.numeric(if_else(tx.date == fu.date, 
                     (tx.date - accept.dt) -0.5, 
                     (tx.date - accept.dt))), 
    
    id = dplyr::row_number()) |> 
  dplyr::rename(death_1 = fustat) |> 
  dplyr::select(id,txtime,transplant, futime, death_1)

long_dat <- survival::tmerge(dat,dat,id=id, new_death1=event(futime,death_1)) |> 
  survival::tmerge(data2 = dat, id = id, new_transplant = tdc(txtime)) |> 
  dplyr::select(id, txtime, new_transplant, tstart, tstop, new_death1)

# tmergeの使い方
# 3つのデータを用意する
# 以下の3つのデータフレームを用意する。
# 
# d_base：ベースラインの患者背景データ
# id：患者ID
# z：時間非依存性変数（time-constant variable）
# futime：フォローアップ期間
# d_tdcov：時間依存性共変量のデータ
# id：患者ID
# ctime：変数を測定した時点
# value：そのときの値
# d_event：イベント発生データ
# id：患者ID
# etime：イベント発生時点
# event_type：イベントの種類（1種類しかなければ不要）
# 
# base_timedat <- dplyr::select(time_dat, id, fu_time)
# 
# tdcov_timedat <- dplyr::select(time_dat, id, starts_with("time"), starts_with("creat"))
# 
# evet_timedat <-  dplyr::select(time_dat, id, fu_time, fu_yn)
# 
# # tstart, tstopを作る
# tmerge(base_timedat, base_timedat, id=id, tstop=fu_time) |> 
# # time dependent covariatesを作る  
# tmerge(tdcov_timedat, id=id, creat1=tdc(time_1, creat_1))



knitr::kable(head(dat, 10)) |> 
  kableExtra::kable_classic(full_width = TRUE, html_font = "Cambria")

```

-   わかりやすいのは、Crやタバコの本数
-   一つの例として、Lead time biasの問題もある

## 列名の意味 {.smaller}

| Column name | Meaning                                            |
|-------------|----------------------------------------------------|
| subject     | Patients' ID                                       |
| tx.date     | Transplant date                                    |
| futime      | Follow-up time                                     |
| age         | Age (in years)                                     |
| mismatch    | Mismatch score                                     |
| death_1     | Death or alive (1 indicate death)                  |
| tx.time     | Duration between registration and transplantation. |
| reject      | rejection occured                                  |

: Survival of patients on the waiting list for the Stanford heart transplant program.

## 通常の解析

::: columns
::: {.column width="50%"}
```{r}
#| label: simple-kmcurve
#| column: margin

simple_fit <- survfit(Surv(futime, death_1) ~ transplant, data = dat)

survfit2(Surv(futime, death_1) ~ transplant, data = dat) |> 
  ggsurvfit(type = "risk") + 
  scale_color_discrete(labels = c("Not transplant", "Transplant")) +
  add_pvalue(location = "annotation") +
  add_risktable()

tdc_fit <- survfit(Surv(tstart, tstop, new_death1) ~ new_transplant, data = long_dat) 

ggsurvplot(fit = tdc_fit, data = long_dat, fun = "event", risk.table = TRUE)

coxph(Surv(tstart, tstop, new_death1) ~ new_transplant, data = long_dat) |> 
  gtsummary::tbl_regression(exponentiate = TRUE)


```
:::

::: {.column width="50%"}
```{r}
#| label: simple-coxanalysis
#| column: margin

simple_fit <- survfit(Surv(futime, death_1) ~ transplant, data = dat)

coxph(Surv(futime, death_1) ~ transplant , data = dat) |> 
  gtsummary::tbl_regression(exponentiate = TRUE) |> 
  gtsummary::as_kable_extra() |> 
  kableExtra::kable_classic(full_width = FALSE, html_font = "Cambria") 

```
:::
:::

-   Transplantされた患者の予後が極めて良い

## この解析の問題は？

-   生き残った人しか移植を受けられない
    -   Lead time bias
        -   治療効果を過大に評価してしまう
-   移植を受けた人は移植を受ける前に、「非移植」の時間帯がある
    -   この時間帯をどう解析する？

## 他の例

-   悪性腫瘍の患者で、放射線曝露量と予後を見る
    -   途中で亡くなる患者は放射線療法を最後まで受けられない\n → 治療効果を過大に推定してしまう!!
    -   放射線の被曝量が多いほど予後が良い？ → そのまま信じると危険！

## どうすればいい？

::: columns
::: {.column .column-page width="50%"}
![Idea of time-dependent analysis](images/time-dependent-idea.jpeg){fig-align="center"}

-   移植の待機中は非曝露期間として解析を行う
:::

::: {.column .column-page width="50%"}
![Idea of time-dependent analysis](images/transplant-split-idea.jpeg){fig-align="center"}

-   移植前は「非移植」の群として扱う
:::
:::

## 分割しても大丈夫？

![Idea of time-dependent analysis](images/time-split-idea.jpeg){fig-align="center"}

-   Cox回帰の性質上、ちゃんと比例ハザード性が保たれていれば問題はない！

## 本当に？

::: columns
::: {.column width="50%"}
```{r}
#| label: data-info
#| column: margin

colon_df <- survival::colon |> 
  tibble::as_tibble() |>
  dplyr::filter(etype == 1) |> 
  dplyr::select(-study, -etype) |>
  dplyr::select(id, time, status, surg, sex, age)

knitr::kable(head(colon_df)) |> 
  kableExtra::kable_classic(full_width = F, html_font = "Cambria") |>
  kableExtra::kable_styling(latex_options = "scale_down")

paste0("Number of patients: ", nrow(colon_df))

```

::: smaller
-   大腸癌のデータ
-   IDが1人1人の識別
:::
:::

::: {.column width="50%"}
```{r}
#| label: basic-coxph
#| column: margin

survfit(Surv(time, status) ~ surg, data = colon_df) |> 
  survminer::ggsurvplot(data = colon_df, 
                        fun = "event",
                        pval = TRUE, 
                        pval.coord = c(1000, 0.1),
                        risk.table = TRUE
                          )


survival::coxph(Surv(time, status) ~ surg, data = colon_df) |> 
  gtsummary::tbl_regression(exponentiate = TRUE) |> 
  gtsummary::as_kable_extra() |> 
  kableExtra::kable_classic(full_width = TRUE, html_font = "Cambria")  |>
  kableExtra::kable_styling(font_size = 8,
                            latex_options = "scale_down")

```

```{r}

set.seed(42)

time_dat <- tibble::tibble(
  id = seq(1:100), 
  creat_1 = runif(100, min = 0.23, max = 2.2), 
  time_1 = 180, 
  creat_2 = creat_1 + rnorm(n = 100, mean = 0.1, sd = 0.05), 
  time_2 = 360, 
  creat_3 = creat_2 + rnorm(n = 100, mean = -0.05, sd = 0.03), 
  time_3 = 540, 
  fu_time = floor(runif(100, min = 160, max=800)), 
  fu_yn = rbinom(100, size = 1, prob = 0.4)
) |> 
  dplyr::mutate(
  creat_1 = if_else(fu_time < 180, NA_real_, creat_1), 
  creat_2 = if_else(fu_time < 360, NA_real_, creat_2), 
  creat_3 = if_else(fu_time < 540, NA_real_, creat_3), 
  time_1 = if_else(fu_time < 180, NA_real_, time_1), 
  time_2 = if_else(fu_time < 360, NA_real_, time_2), 
  time_3 = if_else(fu_time < 540, NA_real_, time_3),   
  )


time_dat_long <- tidyr::pivot_longer(time_dat, 
                    cols = -c(id, fu_time, fu_yn), 
                    names_pattern = "(.*)_(.)", 
                    names_to = c(".value", "timegroup")) |> 
  dplyr::filter(!is.na(creat)) |> 
  dplyr::rename(tstop = time) |>
  dplyr::mutate(tstart = case_when(
    tstop == 180 ~ 0L, 
    tstop == 360 ~ 181L, 
    tstop == 540 ~ 361L
  )) |> 
  dplyr::relocate(id, timegroup, tstart, tstop, creat, everything())


survival::coxph(Surv(tstart, tstop, fu_yn) ~ creat, data = time_dat_long)


```



:::

::: smaller
-   テストデータ
-   比例ハザード性は保たれていそう
:::
:::

## 分割した場合

::: columns
::: {.column width="50%"}
```{r}
#| label: split-data-analysis
#| column: margin

colon_df2 <- survSplit(Surv(time, status) ~ ., colon_df,
                   cut=seq(0, 3500, by = 300), episode ="timegroup") |> 
  dplyr::select(id, time, tstart, timegroup, status, surg, sex, age) |> 
  tibble::as_tibble()


survfit(Surv(tstart, time, status) ~ surg, data = colon_df2) |> 
  survminer::ggsurvplot(data = colon_df2, 
                        fun = "event",
                        risk.table = TRUE
                          )

knitr::kable(head(colon_df2, 8)) |> 
  kableExtra::kable_classic(full_width = F, html_font = "Cambria") |>
  kableExtra::kable_styling() |> 
  kableExtra::column_spec(column = 1:5, bold = TRUE, color = "red")

paste0("Number of patients: ", nrow(colon_df2))


```
:::

::: {.column width="50%"}
```{r}
#| label: split-data-coxph
#| column: margin


survival::coxph(Surv(time, status) ~ surg, data = colon_df2) |> 
  gtsummary::tbl_regression(exponentiate = TRUE)  |>　
  gtsummary::as_kable_extra() |>
  kableExtra::kable_styling(font_size = 16,
                            latex_options = "scale_down") |> 
  kableExtra::kable_classic(full_width = TRUE, html_font = "Cambria")


```
:::
:::

## 移植の話に戻って

```{r}



```

## ここまでのまとめ

## 2. 時間とともに係数が変化する共変量

-   例えば、放射線と悪性腫瘍やの関係はおそらく直線ではない
-   例えば、CABGとMIの関係も時間により変化する(ISCHEMIA)

```{r}
#| label: time-varying-coefficient

options(show.signif.stars = FALSE)

vfit <- coxph(Surv(time, status) ~ trt + prior + karno, data = veteran)

quantile(veteran$karno)

zp <- cox.zph(vfit, transform = function(time)log(time + 20))

survminer::ggcoxzph(zp, var = "karno") |> ggpubr::ggpar(ylim = c(-0.12, 0.04))

vet2 <- survSplit(Surv(time, status) ~ ., data = veteran, cut = c(90, 180), episode = "tgroup", id = "id")

knitr::kable(head(dplyr::select(vet2, id, tstart, time, status, tgroup, age, karno))) |> 
  kableExtra::kable_styling(latex_options = "scale_down")


vfit2 <- coxph(Surv(tstart, time, status) ~ trt + prior +
karno:strata(tgroup), data=vet2)

```

## どうやって、いつTime varying coxを使う？

1.  時間により値が変化する共変量: シンプル
2.  時間により値が変化する共変量: 残差を確認

## 残差のチェック

```{r}
#| label: time-varying-coefficient

options(show.signif.stars = FALSE)

vfit <- coxph(Surv(time, status) ~ trt + prior + karno, data = veteran)

quantile(veteran$karno)

zp <- cox.zph(vfit, transform = function(time)log(time + 20))

survminer::ggcoxzph(zp, var = "karno") |> ggpubr::ggpar(ylim = c(-0.12, 0.04))

vet2 <- survSplit(Surv(time, status) ~ ., data = veteran, cut = c(90, 180), episode = "tgroup", id = "id")

knitr::kable(head(dplyr::select(vet2, id, tstart, time, status, tgroup, age, karno))) |> 
  kableExtra::kable_styling(latex_options = "scale_down")


vfit2 <- coxph(Surv(tstart, time, status) ~ trt + prior +
karno:strata(tgroup), data=vet2)

```

## 値を確認

## 
```{r}

temp <- subset(pbc, id <= 312, select = c(id:sex, stage))

pbc2 <- tmerge(temp, temp, id = id, death = event(time, status))

pbc3 <- tmerge(pbc2, pbcseq, id = id, ascites = tdc(day, ascites), bili = tdc(day, bili), albumin = tdc(day, albumin), protime = tdc(day, protime), alk.phos = tdc(day, alk.phos))


Hmisc::getHdata("valung")

with(valung, {
  rms::hazard.ratio.plot(1 * (cell == 'Squamous'), Surv(t, dead), e = 25, subset = cell != 'Large' ,pr = TRUE, pl = TRUE, ylim = c(-2.5, 0.5))
})

with(valung, {
    rms::hazard.ratio.plot(1 * kps, Surv(t, dead), e = 25, pr = TRUE, pl = TRUE, ylim = c(-2.5, 0.5))
})


```
```{r}
library(survival)
library(rms)

colon_tt <- dplyr::arrange(colon_df, time) |> 
  dplyr::mutate(id = dplyr::row_number()) |> 
  dplyr::slice_head(n = 400)
# original coxph tt fit

fit <- coxph(Surv(time,status) ~ age + sex + surg + tt(age), data = colon_tt, x=T,y=T,tt=function(x,t,...) x*log(t))

# Creating a countingprocess-format survival file using survSplit

colontt_long <-survSplit(Surv(time,status)~.,data = colon_tt, cut=1:max(colon_tt$time), start = "tstart", end = "tstop", episode="timegroup") |> 
  dplyr::mutate(age_tt = age * log(timegroup))

# some settings required for cph and other rms functions to work
dd <- datadist(colontt_long)

options(datadist="dd")

# fitting the cph model

fit_cph <- cph(Surv(tstart,tstop,status) ~ age + sex + surg + age_tt, x=T,y=T,data=colontt_long)


fit_cox <- coxph(Surv(tstart,tstop,status) ~  age + sex + surg + age_tt, x=T,y=T,data=colontt_long)



```


```{r}

kidney <- survival::kidney |> 
  dplyr::mutate(id = dplyr::row_number())

kidney_log <-survSplit(Surv(time,status)~.,data = kidney, cut=1:max(kidney$time), start = "tstart", end = "tstop", episode="timegroup") |> 
  dplyr::mutate(frail_tt = frail * log(timegroup))

kidney_log_fit <- coxph(Surv(tstart,tstop,status) ~  age + sex + disease + frail_tt, x=T,y=T,data=kidney_log)



kidney_fit <- coxph(Surv(time, status) ~ age + sex + disease + frail, data = kidney)

kidney_zph <- cox.zph(kidney_fit)


par(mfrow = c(2, 2))
plot(cox.zph(kidney_fit))

step_kidney <- survSplit(Surv(time, status) ~ ., 
                         data = survival::kidney, 
                         cut = 31, start = "tstart", 
                         episode = "timegroup", end = "tstop")

step_fit <- coxph(Surv(tstart, tstop, status) ~ age + sex + disease + frail:strata(timegroup), data = step_kidney)

gtsummary::tbl_regression(step_fit, exponentiate = TRUE)


timereg::timecox(Surv(time, status) ~ const(age) + const(sex) + const(disease) + frail, data = kidney, n.sim = 500, max.time = 562)

library(survPen)
library(rstpm2)

fit_pen <- survPen(formula = ~age + sex + disease + smf(frail, 3), data=kidney,t1=time, event=status)

fit_rstpm <- rstpm2::pstpm2(formula = Surv(time, status) ~ frail, data = kidney, tvc = list(frail = -1))



```



